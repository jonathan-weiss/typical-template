/* @@tt-template-renderer [
    templateRendererClassName="EntityDto"
    templateRendererPackageName="examples"
] */
/* @@tt-template-model [
    modelClassName="DtoModel"
    modelPackageName="examples"
    modelName="myModel"
] */

/* @@tt-template-model [
    modelClassName="DtoModel"
    modelPackageName="examples"
    modelName="mySecondModel"
] */

/* @@tt-replace-value-by-expression [searchValue="Author" replaceByExpression="myModel.entityCapitalized"]
                                    [searchValue="author" replaceByExpression="myModel"]
 */
data class AuthorDto(// @@tt-replace-value-by-expression [ searchValue="firstname" replaceByExpression="myModel.entityField" ]
  val firstname: String,// @@tt-end-replace-value-by-expression
  val lastname: String,
) {


    fun getAuthor(): AuthorDto {
        return this;
    }

/* @@tt-if-condition [ conditionExpression="myModel.isGenerateToString()" ] */
  fun toString(): String {
    return "Author[${super.toString()}]"
  }
/* @@tt-end-if-condition */
/* @@tt-end-replace-value-by-expression */

  // This author and Author should not be replaced.

  // test for nested replace expressions
/* @@tt-replace-value-by-expression [searchValue="Author" replaceByExpression="myModel.entityName"]
                                    [searchValue="author" replaceByExpression="myModel.entityNameDecapitalized"]
 */

/* @@tt-replace-value-by-expression [
       searchValue="Author" replaceByExpression="myModel.entityNameCapitalized"
] */

      // should use 'Capitalized' version
      fun getAuthor(): Author {
          return author
      }

/* @@tt-end-replace-value-by-expression */
/* @@tt-end-replace-value-by-expression */


  // test the if..else..end-if statement
/* @@tt-if-condition [ conditionExpression="myModel.isSerializable()" ] */
        fun isSerialize(): Boolean = true
/* else-of-if-condition */
        fun isSerialize(): Boolean = false
/* @@tt-end-if-condition */

  // test the if..else-if..end-if statement

  val visibility: String =
/* @@tt-if-condition [ conditionExpression="myModel.isPrivate()" ] */
        "private"
/* @@tt-else-if-condition [ conditionExpression="myModel.isProtected()" ] */
        "protected"
/* @@tt-else-if-condition [ conditionExpression="myModel.isPublic()" ] */
        "public"
/* @@tt-end-if-condition */


  // test the if..else-if..else..end-if statement
  val mainCharacteristic: String =
/* @@tt-if-condition [ conditionExpression="myModel.isEnum()" ] */
        "enum-class"
/* @@tt-else-if-condition [ conditionExpression="myModel.isDataClass()" ] */
        "data-class"
/* else-of-if-condition */
        "regular-class"
/* @@tt-end-if-condition */

  // test the foreach..end-foreach statement
/* @@tt-foreach [ iteratorExpression="myModel.myFieldList" loopVariable="field" ] */
        println("field: $field")
/* @@tt-end-foreach */

  // test the ignore-text statement

/* @@tt-ignore-text */
// THIS TEXT SHOULD NOT BE ON THE OUTPUT!!!
/* @@tt-end-ignore-text */

  // test the ignore-text statement with nesting
/* @@tt-ignore-text */
/* @@tt-if-condition [ conditionExpression="myModel.isIgnored()" ] */
  // THIS TEXT SHOULD NOT BE ON THE OUTPUT!!!
/* @@tt-else-if-condition [ conditionExpression="myModel.isIgnoredToo()()" ] */
  // THIS TEXT SHOULD NOT BE ON THE OUTPUT!!!
/* else-of-if-condition */
  // THIS TEXT SHOULD NOT BE ON THE OUTPUT!!!
/* @@tt-end-if-condition */
  // THIS TEXT SHOULD NOT BE ON THE OUTPUT!!!
/* @@tt-end-ignore-text */
  // end of test the ignore-text statement with nesting

  // test the print-text command

/* @@tt-print-text [ text="This text is to print" ] */
/* @@tt-print-text [ text="

and this text, too

" ] */

  // end of test the print-text command

}
